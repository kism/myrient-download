[project]
name = "myrientdownload"
version = "1.0.2"
description = "A program to download files Myrient"
authors = [
    { name = "Kieran Gee", email = "kieran.lost.the.game@gmail.com" },
    { name = "Trent Neilson" },
    { name = "Tucker Warlock" },
]
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "beautifulsoup4>=4.13.4",
    "colorama>=0.4.6",
    "pydantic>=2.11.4",
    "pydantic-settings>=2.9.1",
    "requests>=2.32.3",
    "tomlkit>=0.13.2",
    "tqdm>=4.67.1",
]

[dependency-groups]
type = [
    "mypy>=1.15.0",
    "types-colorama>=0.4.15.20240311",
    "types-requests>=2.32.0.20241016",
    "types-tqdm>=4.67.0.20250417",
]
lint = ["ruff>=0.9.7"]

test = [
    "pytest",
    "pytest-cov",
    "pytest-mock",
    "pytest-random-order",
    "detect-test-pollution",
    "tomlkit",
]

[tool.uv]
default-groups = ["type", "lint", "test"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]

packages = ["myrientdownload"]

[project.scripts]
myrient-download = "myrientdownload:__main__.main"

[project.urls]
"Homepage" = "https://github.com/kism/myrient-download"

[tool.ruff]
cache-dir = "~/.cache/ruff"
target-version = "py312"
line-length = 120

[tool.ruff.lint]
extend-fixable = ["B", "I001"] # KG I think this means something...
extend-unsafe-fixes = [
    "F401",
] # KG I don't like that this is fixed automatically (this doesnt work?)
select = ["ALL"] # KG Include absolutely all of Ruff's rules.
ignore = [
    # Modules
    "DJ",  # KG Django not required
    "DTZ", # KG no need to specify timezone for time objects

    # Specific rules
    "TD002",  # KG Verbose TODO, only I work on this project
    "TD003",  # KG Verbose TODO, only I work on this project
    "ISC001", # KG conflict in the formatter
    "COM812", # KG conflict in the formatter
]

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = [
    # Modules
    "ARG", # KG Unused function args -> fixtures nevertheless are functionally relevant
    "FBT", # KG Don't care about booleans as positional arguments in tests, e.g. via @pytest.mark.parametrize()
    "ANN", # KG Don't care about annotations in tests
    "D",   # KG Don't care about docstrings in tests

    # Specific rules
    "S101",    # KG asserts allowed in tests.
    "SLF001",  # KG Accessing private members is needed for testing.
    "INP001",  # KG __init__.py not needed for PyTest.
    "PT004",   # KG monkeypatch doesn't return.
    "S311",    # KG I'll assume no real crypto will be done in PyTest.
    "S105",    # KG Hardcoded fake passwords are fine in tests.
    "PLR0913", # KG Tests can have as many arguments as they want.
    "BLE001",  # KG Tests can use BaseException.
]


[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
docstring-code-format = true
docstring-code-line-length = 40

[tool.pytest.ini_options]
addopts = [
    "--cov-context=test",
    "--cov=myrientdownload",
    "--cov-report=term",
    "--cov-report=html",
]
testpaths = ["tests"]

[tool.coverage.html]
show_contexts = true

[tool.mypy]
files = ["myrientdownload"]
namespace_packages = true
explicit_package_bases = true
show_error_codes = true
strict = true
enable_error_code = [
    "ignore-without-code",
    "redundant-expr",
    "truthy-bool",
    "type-arg",
]
exclude = ["tests/*"]
